package metric

import (
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

// growing time for tests to avoid errors generated by store avoiding samples too close in time
var (
	now = time.Now()
	_   = func() time.Time {
		now = now.Add(1 * time.Second)
		return now
	}
)

var _ = []struct {
	testCase string
	key      string
	value    interface{}
	out      interface{}
	cache    interface{}
}{
	{"1st data in key", "key1", .22323333, 0.0, 0.22323333},
	{"1st data in key", "key2", 100, 0.0, 100.0},
	{"2nd data in key", "key2", 110, 10.0, 110.0},
}

func Test_Metric_CreateGauge(t *testing.T) {
	g, _ := NewGauge(now, "gauge", 1)
	assert.NotNil(t, g)
}

func Test_Metric_CannotCreateGaugeWithEmptyName(t *testing.T) {
	g, err := NewGauge(now, "", 1)
	assert.Nil(t, g)
	assert.Error(t, err)
}

func Test_Metric_CreateCount(t *testing.T) {
	c, _ := NewCount(now, "count", 1)
	assert.NotNil(t, c)
}

func Test_Metric_CannotCreateCountWithEmptyName(t *testing.T) {
	c, err := NewCount(now, "", 1)
	assert.Nil(t, c)
	assert.Error(t, err)
}

func Test_Metric_CreateSummary(t *testing.T) {
	s, _ := NewSummary(now, "summary", 1, 0.5, 1, 0, 1)
	assert.NotNil(t, s)
}

func Test_Metric_CannotCreateSummaryWithEmptyName(t *testing.T) {
	s, err := NewSummary(now, "", 1, 0.5, 1, 0, 1)
	assert.Nil(t, s)
	assert.Error(t, err)
}

func Test_Metric_AddDimension(t *testing.T) {
	attrKey := "test"
	attrVal := "value"
	g, _ := NewGauge(now, "gauge", 1)

	_ = g.AddDimension(attrKey, attrVal)
	assert.Len(t, g.GetDimensions(), 1)
}

func Test_Metric_CannotAddDimensionWithEmptyKey(t *testing.T) {
	g, _ := NewGauge(now, "gauge", 1)
	err := g.AddDimension("", "value")
	assert.Error(t, err)

	assert.Len(t, g.GetDimensions(), 0)
}

func Test_Metric_AttributeReturnsTheAttributeValue(t *testing.T) {
	attrKey := "test"
	attrVal := "value"
	g, _ := NewGauge(now, "gauge", 1)
	_ = g.AddDimension(attrKey, attrVal)

	val := g.Dimension(attrKey)
	assert.Equal(t, attrVal, val)
}

func Test_Metric_CreateCumulativeCount(t *testing.T) {
	cc, _ := NewCumulativeCount(now, "cumulative count", 1)
	assert.NotNil(t, cc)
}

func Test_Metric_CannotCreateCumulativeCountWithEmptyName(t *testing.T) {
	cc, err := NewCumulativeCount(now, "", 1)
	assert.Nil(t, cc)
	assert.Error(t, err)
}

func Test_Metric_CreateRate(t *testing.T) {
	r, _ := NewRate(now, "rate", 110)
	assert.NotNil(t, r)
}

func Test_Metric_CannotCreateCreateRateWithEmptyName(t *testing.T) {
	r, err := NewRate(now, "", 110)
	assert.Nil(t, r)
	assert.Error(t, err)
}

func Test_Metric_CreateCumulativeRate(t *testing.T) {
	cr, _ := NewCumulativeRate(now, "rate", 110)
	assert.NotNil(t, cr)
}

func Test_Metric_CannotCreateCumulativeRateWithEmptyName(t *testing.T) {
	cr, err := NewCumulativeRate(now, "", 110)
	assert.Nil(t, cr)
	assert.Error(t, err)
}
